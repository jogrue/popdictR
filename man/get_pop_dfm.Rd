% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/quanteda-defaults.R
\name{get_pop_dfm}
\alias{get_pop_dfm}
\title{Create a quanteda dfm object}
\usage{
get_pop_dfm(
  text,
  stopwords = NULL,
  create_compounds = FALSE,
  compounds_at_level = "sentences",
  compounds_dict = NULL,
  compounds_dict_glob = FALSE
)
}
\arguments{
\item{text}{A quanteda corpus object or something that can be transformed to
a tokens object by quanteda::tokens().}

\item{stopwords}{Stopwords are words or tokens which are removed from the
dfm. Defaults to NULL.}

\item{create_compounds}{Should compounds for provided multi-word patterns be
created before tokenizing? Defaults to FALSE.}

\item{compounds_at_level}{If compounds for patterns are created, at which
level should patterns be applied? Possible values are "documents",
"sentences", or "paragraphs". Defaults to "sentences".}

\item{compounds_dict}{If compounds for patterns are created, which patterns
should be applied? Needs to be set if create_compounds = TRUE. You can
provide a quanteda dictionary object or a character vector where each element
is a pattern. Patterns are expected to be regular expressions (if
compounds_dict_glob parameter is not set to TRUE) or only include glob-style
wildcards (if compound_dict_glob parameter is set to TRUE).}

\item{compounds_dict_glob}{If compounds for patterns are created, do the
provided patterns use glob-style wildcards instead of regular expressions?
Defaults to FALSE.}
}
\value{
A quanteda dfm object.
}
\description{
This function provides a unified way for creating quanteda dfm
objects with identical settings. This function is basically a replacement for
quanteda's dfm function. It calls get_pop_tokens and pop_tokens_to_dfm from
this package. Using this function makes sure that the same settings are
applied all the time. When create_compounds = TRUE you can also provide a
dictionary and create multi-word compounds for complex regular (or glob)
expressions using the make_compounds function from the multidictR package.
}
