% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/run-popdict.R
\name{run_popdict}
\alias{run_popdict}
\title{Run a German populism dictionary.}
\usage{
run_popdict(
  corpus,
  dict_version = "current",
  at_level = "sentences",
  return_value = "count_at_level",
  include_totals = TRUE,
  return_result_only = FALSE,
  custom_replacement,
  remove = NULL
)
}
\arguments{
\item{corpus}{A quanteda corpus object or something that can be transformed
to a corpus by quanteda::corpus(), for example, a simple character vector}

\item{dict_version}{Defaults to "current" which is currently the only
supported version of the dictionary.}

\item{at_level}{At which level should patterns be applied. Possible values
are "documents", "sentences", or "paragraphs". Defaults to "sentences" as in
Gr端ndl's (2020) paper.}

\item{return_value}{How should the value be returned? Possible values
include "count", "binary", "prop", "count_at_level", or "prop_at_level". You
get the results from the dictionary at the document level. "count"
gives the simple frequency of dictionary hits in each document.
"count_at_level" (the default) gives you the number of sentences or
paragraphs in a document where there was at least one pattern match (as in
Gr端ndl, 2020). Together with the include_totals parameter "count" and
"count_at_level" give you the most flexibility to work with the results.
"binary" returns 0 or 1, depending on whether there was at least one pattern
match in the document. "prop" is the
proportion of pattern matches relative to the total number of tokens in the
document. "prop_at_level" gives you the proportion of sentences or
paragraphs (in a document) where a pattern match was found.}

\item{include_totals}{Should the number of sentences (as "n_sentences") and
number of tokens (as "n_tokens") per document also be returned? Defaults to
TRUE.}

\item{return_result_only}{If TRUE, a data.frame containing the results will
be returned. If FALSE (the default), you will get the provided corpus with
the results attached as new columns.}

\item{custom_replacement}{Internally, this function replaces pattern matches
with a random string (containing 40 random letters and 10 random numbers)
before running quanteda's dictionary lookup function on the corpus. The
random string should be unique and there is usually no need to set a custom
string.}

\item{remove}{Forwarded to quanteda's dfm function. A list of stopwords
which are removed from the dfm before running the dictionary.}
}
\value{
Returns the results of running the dictionary. If return_result_only
is set, you will get a data.frame with only the results. Otherwise, you the
results will be bound to the corpus as new columns. If you only provided
texts, the only other column will be these texts of course (variable x). If
you provided a quanteda corpus, the results will be stored as variables in
the docvars.
}
\description{
This function runs a German populism dictionary (Gr端ndl, 2020). It calls
multidictR::run_multidict. See there for more technical details. Internally,
the package uses stringr::str_replace_all to replace pattern
matches with a random string before then using quanteda to look this string
up in the corpus.
}
\references{
Gr端ndl, J. (2020). Populist ideas on social media: A dictionary-based
measurement of populist communication. \emph{New Media & Society}. Advance
online publication.
\href{https://doi.org/10.1177/1461444820976970}{https://doi.org/10.1177/1461444820976970}
}
